////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : segment_upgrade_drc.vf
// /___/   /\     Timestamp : 11/09/2020 17:54:32
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: C:\Xilinx\14.7\ISE_DS\ISE\bin\nt64\unwrapped\sch2hdl.exe -intstyle ise -family spartan6 -verilog segment_upgrade_drc.vf -w C:/Users/62010472/Documents/XilingLAB/Door2047/segment_upgrade.sch
//Design Name: segment_upgrade
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module D4_16E_HXILINX_segment_upgrade (D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, A0, A1, A2, A3, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;
   output D8;
   output D9;
   output D10;
   output D11;
   output D12;
   output D13;
   output D14;
   output D15;

   input  A0;
   input  A1;
   input  A2;
   input  A3;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;
   reg D8;
   reg D9;
   reg D10;
   reg D11;
   reg D12;
   reg D13;
   reg D14;
   reg D15;

      always @ (A0 or A1 or A2 or A3 or E)
      begin
         if(!E)
           {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0000;
        else
        begin
           case({A3,A2,A1,A0})
             4'b0000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0001;
             4'b0001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0010;
             4'b0010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0100;
             4'b0011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_1000;
             4'b0100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0001_0000;
             4'b0101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0010_0000;
             4'b0110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0100_0000;
             4'b0111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_1000_0000;
             4'b1000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0001_0000_0000;
             4'b1001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0010_0000_0000;
             4'b1010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0100_0000_0000;
             4'b1011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_1000_0000_0000;
             4'b1100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0001_0000_0000_0000;
             4'b1101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0010_0000_0000_0000;
             4'b1110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0100_0000_0000_0000;
             4'b1111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b1000_0000_0000_0000;
          endcase
        end
     end 

endmodule
`timescale  100 ps / 10 ps

module OR6_HXILINX_segment_upgrade (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = (I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_segment_upgrade (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_segment_upgrade(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_segment_upgrade (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_segment_upgrade(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module HEX2SEG_MUSER_segment_upgrade(hex_in, 
                                     SEG);

    input [3:0] hex_in;
   output [6:0] SEG;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   
   OR4  jkhbbshcac (.I0(XLXN_4), 
                   .I1(XLXN_7), 
                   .I2(XLXN_16), 
                   .I3(XLXN_14), 
                   .O(XLXN_20));
   (* HU_SET = "XLXI_1_0" *) 
   D4_16E_HXILINX_segment_upgrade  XLXI_1 (.A0(hex_in[0]), 
                                          .A1(hex_in[1]), 
                                          .A2(hex_in[2]), 
                                          .A3(hex_in[3]), 
                                          .E(XLXN_2), 
                                          .D0(XLXN_3), 
                                          .D1(XLXN_4), 
                                          .D2(XLXN_5), 
                                          .D3(XLXN_6), 
                                          .D4(XLXN_7), 
                                          .D5(XLXN_12), 
                                          .D6(XLXN_11), 
                                          .D7(XLXN_10), 
                                          .D8(), 
                                          .D9(XLXN_8), 
                                          .D10(XLXN_17), 
                                          .D11(XLXN_16), 
                                          .D12(XLXN_15), 
                                          .D13(XLXN_14), 
                                          .D14(XLXN_13), 
                                          .D15(XLXN_18));
   VCC  XLXI_2 (.P(XLXN_2));
   OR4  XLXI_5 (.I0(XLXN_5), 
               .I1(XLXN_15), 
               .I2(XLXN_13), 
               .I3(XLXN_18), 
               .O(XLXN_22));
   (* HU_SET = "XLXI_6_1" *) 
   OR6_HXILINX_segment_upgrade  XLXI_6 (.I0(XLXN_12), 
                                       .I1(XLXN_11), 
                                       .I2(XLXN_16), 
                                       .I3(XLXN_15), 
                                       .I4(XLXN_13), 
                                       .I5(XLXN_18), 
                                       .O(XLXN_21));
   OR5  XLXI_7 (.I0(XLXN_4), 
               .I1(XLXN_7), 
               .I2(XLXN_10), 
               .I3(XLXN_17), 
               .I4(XLXN_18), 
               .O(XLXN_23));
   (* HU_SET = "XLXI_8_2" *) 
   OR6_HXILINX_segment_upgrade  XLXI_8 (.I0(XLXN_4), 
                                       .I1(XLXN_6), 
                                       .I2(XLXN_7), 
                                       .I3(XLXN_12), 
                                       .I4(XLXN_10), 
                                       .I5(XLXN_8), 
                                       .O(XLXN_24));
   OR5  XLXI_9 (.I0(XLXN_4), 
               .I1(XLXN_5), 
               .I2(XLXN_6), 
               .I3(XLXN_10), 
               .I4(XLXN_14), 
               .O(XLXN_25));
   OR4  XLXI_10 (.I0(XLXN_3), 
                .I1(XLXN_4), 
                .I2(XLXN_10), 
                .I3(XLXN_15), 
                .O(XLXN_26));
   INV  XLXI_11 (.I(XLXN_20), 
                .O(SEG[0]));
   INV  XLXI_12 (.I(XLXN_21), 
                .O(SEG[1]));
   INV  XLXI_13 (.I(XLXN_22), 
                .O(SEG[2]));
   INV  XLXI_14 (.I(XLXN_23), 
                .O(SEG[3]));
   INV  XLXI_15 (.I(XLXN_24), 
                .O(SEG[4]));
   INV  XLXI_16 (.I(XLXN_25), 
                .O(SEG[5]));
   INV  XLXI_17 (.I(XLXN_26), 
                .O(SEG[6]));
endmodule
`timescale 1ns / 1ps

module count09_MUSER_segment_upgrade(CLK_P45, 
                                     Bit0_P82, 
                                     Bit1_P81, 
                                     Bit2_P80, 
                                     Bit3_P79, 
                                     Tc);

   (* CLOCK_DEDICATED_ROUTE = "TRUE" *) 
    input CLK_P45;
   output Bit0_P82;
   output Bit1_P81;
   output Bit2_P80;
   output Bit3_P79;
   output Tc;
   
   wire XLXN_3;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire Bit2_P80_DUMMY;
   wire Tc_DUMMY;
   wire Bit1_P81_DUMMY;
   wire Bit3_P79_DUMMY;
   wire Bit0_P82_DUMMY;
   
   assign Bit0_P82 = Bit0_P82_DUMMY;
   assign Bit1_P81 = Bit1_P81_DUMMY;
   assign Bit2_P80 = Bit2_P80_DUMMY;
   assign Bit3_P79 = Bit3_P79_DUMMY;
   assign Tc = Tc_DUMMY;
   (* HU_SET = "XLXI_1_3" *) 
   FJKC_HXILINX_segment_upgrade  XLXI_1 (.C(CLK_P45), 
                                        .CLR(Tc_DUMMY), 
                                        .J(XLXN_3), 
                                        .K(XLXN_3), 
                                        .Q(Bit0_P82_DUMMY));
   (* HU_SET = "XLXI_2_4" *) 
   FJKC_HXILINX_segment_upgrade  XLXI_2 (.C(XLXN_21), 
                                        .CLR(Tc_DUMMY), 
                                        .J(XLXN_3), 
                                        .K(XLXN_3), 
                                        .Q(Bit2_P80_DUMMY));
   (* HU_SET = "XLXI_3_5" *) 
   FJKC_HXILINX_segment_upgrade  XLXI_3 (.C(XLXN_22), 
                                        .CLR(Tc_DUMMY), 
                                        .J(XLXN_3), 
                                        .K(XLXN_3), 
                                        .Q(Bit3_P79_DUMMY));
   VCC  XLXI_4 (.P(XLXN_3));
   INV  XLXI_5 (.I(Bit0_P82_DUMMY), 
               .O(XLXN_6));
   INV  XLXI_6 (.I(Bit2_P80_DUMMY), 
               .O(XLXN_5));
   AND4  XLXI_7 (.I0(Bit3_P79_DUMMY), 
                .I1(XLXN_5), 
                .I2(Bit1_P81_DUMMY), 
                .I3(XLXN_6), 
                .O(Tc_DUMMY));
   (* HU_SET = "XLXI_8_6" *) 
   FJKC_HXILINX_segment_upgrade  XLXI_8 (.C(XLXN_20), 
                                        .CLR(Tc_DUMMY), 
                                        .J(XLXN_3), 
                                        .K(XLXN_3), 
                                        .Q(Bit1_P81_DUMMY));
   INV  XLXI_12 (.I(Bit0_P82_DUMMY), 
                .O(XLXN_20));
   INV  XLXI_13 (.I(Bit1_P81_DUMMY), 
                .O(XLXN_21));
   INV  XLXI_14 (.I(Bit2_P80_DUMMY), 
                .O(XLXN_22));
endmodule
`timescale 1ns / 1ps

module div100k_MUSER_segment_upgrade(CLK_P123, 
                                     CLK_OUT);

    input CLK_P123;
   output CLK_OUT;
   
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   
   count09_MUSER_segment_upgrade  XLXI_2 (.CLK_P45(XLXN_16), 
                                         .Bit0_P82(), 
                                         .Bit1_P81(), 
                                         .Bit2_P80(), 
                                         .Bit3_P79(), 
                                         .Tc(CLK_OUT));
   count09_MUSER_segment_upgrade  XLXI_3 (.CLK_P45(XLXN_15), 
                                         .Bit0_P82(), 
                                         .Bit1_P81(), 
                                         .Bit2_P80(), 
                                         .Bit3_P79(), 
                                         .Tc(XLXN_16));
   count09_MUSER_segment_upgrade  XLXI_4 (.CLK_P45(XLXN_14), 
                                         .Bit0_P82(), 
                                         .Bit1_P81(), 
                                         .Bit2_P80(), 
                                         .Bit3_P79(), 
                                         .Tc(XLXN_15));
   count09_MUSER_segment_upgrade  XLXI_5 (.CLK_P45(XLXN_13), 
                                         .Bit0_P82(), 
                                         .Bit1_P81(), 
                                         .Bit2_P80(), 
                                         .Bit3_P79(), 
                                         .Tc(XLXN_14));
   count09_MUSER_segment_upgrade  XLXI_6 (.CLK_P45(CLK_P123), 
                                         .Bit0_P82(), 
                                         .Bit1_P81(), 
                                         .Bit2_P80(), 
                                         .Bit3_P79(), 
                                         .Tc(XLXN_13));
endmodule
`timescale 1ns / 1ps

module segment_upgrade(CLK_P123, 
                       C1, 
                       C2, 
                       C3, 
                       C4, 
                       COMM, 
                       SEG_OUT);

    input CLK_P123;
    input [3:0] C1;
    input [3:0] C2;
    input [3:0] C3;
    input [3:0] C4;
   output [3:0] COMM;
   output [6:0] SEG_OUT;
   
   wire qweqwe;
   wire qweqweqw;
   wire XLXN_208;
   wire XLXN_340;
   wire XLXN_423;
   wire XLXN_499;
   wire XLXN_502;
   wire XLXN_503;
   wire XLXN_504;
   wire [3:0] XLXN_520;
   wire [3:0] XLXN_523;
   
   VCC  XLXI_93 (.P(XLXN_208));
   (* HU_SET = "XLXI_106_7" *) 
   CB2CE_HXILINX_segment_upgrade  XLXI_106 (.C(XLXN_423), 
                                           .CE(XLXN_208), 
                                           .CLR(), 
                                           .CEO(), 
                                           .Q0(qweqwe), 
                                           .Q1(qweqweqw), 
                                           .TC());
   (* HU_SET = "XLXI_107_8" *) 
   D2_4E_HXILINX_segment_upgrade  XLXI_107 (.A0(qweqwe), 
                                           .A1(qweqweqw), 
                                           .E(XLXN_340), 
                                           .D0(XLXN_499), 
                                           .D1(XLXN_502), 
                                           .D2(XLXN_503), 
                                           .D3(XLXN_504));
   VCC  XLXI_128 (.P(XLXN_340));
   INV  XLXI_163 (.I(XLXN_499), 
                 .O(COMM[0]));
   INV  XLXI_164 (.I(XLXN_502), 
                 .O(COMM[1]));
   INV  XLXI_165 (.I(XLXN_503), 
                 .O(COMM[2]));
   INV  XLXI_166 (.I(XLXN_504), 
                 .O(COMM[3]));
   div100k_MUSER_segment_upgrade  XLXI_167 (.CLK_P123(CLK_P123), 
                                           .CLK_OUT(XLXN_423));
   (* HU_SET = "XLXI_1683_0_12" *) 
   M4_1E_HXILINX_segment_upgrade  XLXI_1683_0 (.D0(C1[0]), 
                                              .D1(C2[0]), 
                                              .D2(C3[0]), 
                                              .D3(C4[0]), 
                                              .E(XLXN_520[0]), 
                                              .S0(qweqwe), 
                                              .S1(qweqweqw), 
                                              .O(XLXN_523[0]));
   (* HU_SET = "XLXI_1683_1_11" *) 
   M4_1E_HXILINX_segment_upgrade  XLXI_1683_1 (.D0(C1[1]), 
                                              .D1(C2[1]), 
                                              .D2(C3[1]), 
                                              .D3(C4[1]), 
                                              .E(XLXN_520[1]), 
                                              .S0(qweqwe), 
                                              .S1(qweqweqw), 
                                              .O(XLXN_523[1]));
   (* HU_SET = "XLXI_1683_2_10" *) 
   M4_1E_HXILINX_segment_upgrade  XLXI_1683_2 (.D0(C1[2]), 
                                              .D1(C2[2]), 
                                              .D2(C3[2]), 
                                              .D3(C4[2]), 
                                              .E(XLXN_520[2]), 
                                              .S0(qweqwe), 
                                              .S1(qweqweqw), 
                                              .O(XLXN_523[2]));
   (* HU_SET = "XLXI_1683_3_9" *) 
   M4_1E_HXILINX_segment_upgrade  XLXI_1683_3 (.D0(C1[3]), 
                                              .D1(C2[3]), 
                                              .D2(C3[3]), 
                                              .D3(C4[3]), 
                                              .E(XLXN_520[3]), 
                                              .S0(qweqwe), 
                                              .S1(qweqweqw), 
                                              .O(XLXN_523[3]));
   VCC  XLXI_1685_0 (.P(XLXN_520[0]));
   VCC  XLXI_1685_1 (.P(XLXN_520[1]));
   VCC  XLXI_1685_2 (.P(XLXN_520[2]));
   VCC  XLXI_1685_3 (.P(XLXN_520[3]));
   HEX2SEG_MUSER_segment_upgrade  XLXI_1687 (.hex_in(XLXN_523[3:0]), 
                                            .SEG(SEG_OUT[6:0]));
endmodule
